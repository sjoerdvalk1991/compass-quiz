/*
##Spacing
Responsive versions available, use large-, medium- or small- as prefix. Breakpoints are same as grid.
```
<div class="codeblock small-mtl"><small>small-mtl</small></div>
<div class="codeblock small-mrl"><small>small-mrl</small></div>
<div class="codeblock small-mbl"><small>small-mbl</small></div>
<div class="codeblock small-mll"><small>small-mll</small></div>
<div class="codeblock small-mal"><small>small-mal</small></div>
<br/>
<div class="codeblock small-ptl"><small>small-ptl</small></div>
<div class="codeblock small-prl"><small>small-prl</small></div>
<div class="codeblock small-pbl"><small>small-pbl</small></div>
<div class="codeblock small-pll"><small>small-pll</small></div>
<div class="codeblock small-pal"><small>small-pal</small></div>

```
*/

//Use REM for consistent padding and margins
$spacing: (0, 0.3125rem, 0.625rem, 0.9375rem, 1.25rem, 2.5rem) !default;


// Media Query Ranges
$small-range: (0, 40em);
$medium-range: (40.063em, 64em);
$large-range: (64.063em, 90em);
$xlarge-range: (90.063em, 120em);
$xxlarge-range: (120.063em, 99999999em);

$screen: "only screen";

$landscape: "#{$screen} and (orientation: landscape)";
$portrait: "#{$screen} and (orientation: portrait)";

$small-up: $screen;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})";

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})";
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})";

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})";
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})";

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})";
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})";

$small: $small-up;
$medium: $medium-up;
$large: $large-up;


// Colors
$colors: (
	light: 		#ffffff,
	stable:		#e7e7e7,
	positive:	#008CBA,
	calm:		#43cee6,
	balanced:	#66cc33,
	energized: 	#f0b840,
	assertive:	#ef4e3a,
	royal:		#8a6de9,
	dark: 		#000000
);









$paddingMargins: (p, m);
$pm: (padding, margin);
$positions: (t, r, b, l, a);
$pos: (top, right, bottom, left, '');
$sizes: (n, s, m, l, xl, xxl);
$mediaQueries: ($small, $medium, $large);
$helper: ("small-", "medium-", "large-");

//create classes
@for $i from 1 through length($mediaQueries) {
	@media #{nth($mediaQueries, $i)} {
		@for $j from 1 through length($paddingMargins) {
			@for $p from 1 through length($positions) {
				@for $s from 1 through length($sizes) {
					@if $s == 1{
						@if $p == length($positions) {
							.#{nth($helper, $i)}no-#{nth($paddingMargins, $j)}{
								#{nth($pm, $j)}: nth($spacing, $s) !important;
							}
						} @else{
							.#{nth($helper, $i)}no-#{nth($paddingMargins, $j)}#{nth($positions, $p)}{
								#{nth($pm, $j)}-#{nth($pos, $p)}: nth($spacing, $s) !important;
							}
						}
					} @else {
						@if $p == length($positions) {
							.#{nth($helper, $i)}#{nth($paddingMargins, $j)}a#{nth($sizes, $s)}{
								#{nth($pm, $j)}: nth($spacing, $s) !important;
							}
						} @else{
							.#{nth($helper, $i)}#{nth($paddingMargins, $j)}#{nth($positions, $p)}#{nth($sizes, $s)}{
								#{nth($pm, $j)}-#{nth($pos, $p)}: nth($spacing, $s) !important;
							}
						}
					}
				}
			}
		}
	}
}
